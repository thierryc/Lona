// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var Glob = require("glob");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Process = require("process");
var FsExtra = require("fs-extra");
var GetStdin = require("get-stdin");
var Json_decode = require("bs-json/src/Json_decode.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var LodashCamelcase = require("lodash.camelcase");
var LodashUpperfirst = require("lodash.upperfirst");
var Color$LonaCompilerCore = require("./core/color.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Config$LonaCompilerCore = require("./core/config.bs.js");
var Decode$LonaCompilerCore = require("./core/decode.bs.js");
var XmlColor$LonaCompilerCore = require("./xml/xmlColor.bs.js");
var TextStyle$LonaCompilerCore = require("./core/textStyle.bs.js");
var SwiftColor$LonaCompilerCore = require("./swift/swiftColor.bs.js");
var SwiftRender$LonaCompilerCore = require("./swift/swiftRender.bs.js");
var SwiftComponent$LonaCompilerCore = require("./swift/swiftComponent.bs.js");
var SwiftTextStyle$LonaCompilerCore = require("./swift/swiftTextStyle.bs.js");
var JavaScriptColor$LonaCompilerCore = require("./javaScript/javaScriptColor.bs.js");
var JavaScriptRender$LonaCompilerCore = require("./javaScript/javaScriptRender.bs.js");
var JavaScriptComponent$LonaCompilerCore = require("./javaScript/javaScriptComponent.bs.js");
var JavaScriptTextStyle$LonaCompilerCore = require("./javaScript/javaScriptTextStyle.bs.js");

var $$arguments = $$Array.to_list(Process.argv);

var positionalArguments = List.filter((function (arg) {
          return !arg.startsWith("--");
        }))($$arguments);

function getArgument(name) {
  var prefix = "--" + (name + "=");
  var exit = 0;
  var value;
  try {
    value = List.find((function (param) {
            return param.startsWith(prefix);
          }), $$arguments);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Some */[value.slice(prefix.length)];
  }
  
}

var match = getArgument("preset");

var tmp;

tmp = match && match[0] === "airbnb" ? /* Airbnb */1 : /* Standard */0;

var options_001 = /* filterComponents */getArgument("filterComponents");

var options = /* record */[
  /* preset */tmp,
  options_001
];

var match$1 = getArgument("framework");

var tmp$1;

tmp$1 = match$1 && match$1[0] === "appkit" ? /* AppKit */1 : /* UIKit */0;

var swiftOptions = /* record */[/* framework */tmp$1];

var match$2 = getArgument("framework");

var tmp$2;

if (match$2) {
  switch (match$2[0]) {
    case "reactdom" : 
        tmp$2 = /* ReactDOM */0;
        break;
    case "reactsketchapp" : 
        tmp$2 = /* ReactSketchapp */2;
        break;
    default:
      tmp$2 = /* ReactNative */1;
  }
} else {
  tmp$2 = /* ReactNative */1;
}

var javaScriptOptions = /* record */[/* framework */tmp$2];

function exit(message) {
  console.log(message);
  return (process.exit(1));
}

if (List.length(positionalArguments) < 3) {
  exit("No command given");
}

var command = List.nth(positionalArguments, 2);

if (List.length(positionalArguments) < 4) {
  exit("No target given");
}

var match$3 = List.nth(positionalArguments, 3);

var target;

switch (match$3) {
  case "js" : 
      target = /* JavaScript */0;
      break;
  case "swift" : 
      target = /* Swift */1;
      break;
  case "xml" : 
      target = /* Xml */2;
      break;
  default:
    target = exit("Unrecognized target");
}

function findWorkspaceDirectory(_path) {
  while(true) {
    var path = _path;
    var exists = Fs.existsSync(Path.join(path, "colors.json"));
    if (exists) {
      return /* Some */[path];
    } else {
      var parent = Path.dirname(path);
      if (parent === "/") {
        return /* None */0;
      } else {
        _path = parent;
        continue ;
      }
    }
  };
}

function concat(base, addition) {
  return Path.join(base, addition);
}

function getTargetExtension(param) {
  switch (param) {
    case 0 : 
        return ".js";
    case 1 : 
        return ".swift";
    case 2 : 
        return ".xml";
    
  }
}

function formatFilename(target, filename) {
  if (target !== 1) {
    return LodashCamelcase(filename);
  } else {
    return LodashUpperfirst(LodashCamelcase(filename));
  }
}

var targetExtension = getTargetExtension(target);

function renderColors(target, colors) {
  switch (target) {
    case 0 : 
        return JavaScriptColor$LonaCompilerCore.render(colors);
    case 1 : 
        return SwiftColor$LonaCompilerCore.render(options, swiftOptions, colors);
    case 2 : 
        return XmlColor$LonaCompilerCore.render(colors);
    
  }
}

function renderTextStyles(target, colors, textStyles) {
  switch (target) {
    case 0 : 
        return JavaScriptTextStyle$LonaCompilerCore.render(colors, textStyles);
    case 1 : 
        return SwiftTextStyle$LonaCompilerCore.render(swiftOptions, colors, textStyles);
    case 2 : 
        return "";
    
  }
}

function convertColors(target, contents) {
  return renderColors(target, Color$LonaCompilerCore.parseFile(contents));
}

function convertTextStyles(target, workspacePath, content) {
  var colorsFile = Fs.readFileSync(Path.join(workspacePath, "colors.json"), "utf8");
  var colors = Color$LonaCompilerCore.parseFile(colorsFile);
  return renderTextStyles(target, colors, TextStyle$LonaCompilerCore.parseFile(content));
}

var ComponentNotFound = Caml_exceptions.create("Main-LonaCompilerCore.ComponentNotFound");

function findComponentFile(fromDirectory, componentName) {
  var searchPath = "**/" + (componentName + ".component");
  var files = $$Array.to_list(Glob.sync(Path.join(fromDirectory, searchPath)));
  var match = List.length(files);
  if (match !== 0) {
    return List.hd(files);
  } else {
    throw [
          ComponentNotFound,
          componentName
        ];
  }
}

function findComponent(fromDirectory, componentName) {
  var filename = findComponentFile(fromDirectory, componentName);
  return JSON.parse(Fs.readFileSync(filename, "utf8"));
}

function getComponentRelativePath(fromDirectory, sourceComponent, importedComponent) {
  var sourcePath = Path.dirname(findComponentFile(fromDirectory, sourceComponent));
  var importedPath = findComponentFile(fromDirectory, importedComponent);
  var relativePath = Path.relative(sourcePath, importedPath);
  var match = relativePath.startsWith(".");
  if (match) {
    return relativePath;
  } else {
    return "./" + relativePath;
  }
}

function getAssetRelativePath(fromDirectory, sourceComponent, importedPath) {
  var sourcePath = Path.dirname(findComponentFile(fromDirectory, sourceComponent));
  var importedPath$1 = Path.join(fromDirectory, importedPath);
  var relativePath = Path.relative(sourcePath, importedPath$1);
  var match = relativePath.startsWith(".");
  if (match) {
    return relativePath;
  } else {
    return "./" + relativePath;
  }
}

function convertComponent(filename) {
  var contents = Fs.readFileSync(filename, "utf8");
  var parsed = JSON.parse(contents);
  var name = Path.basename(filename, ".component");
  var match = findWorkspaceDirectory(filename);
  if (match) {
    var workspace = match[0];
    var colorsFilePath = Path.join(workspace, "colors.json");
    var colorsFile = Fs.readFileSync(colorsFilePath, "utf8");
    var colors = Color$LonaCompilerCore.parseFile(colorsFile);
    var textStylesFilePath = Path.join(workspace, "textStyles.json");
    var textStylesFile = Fs.readFileSync(textStylesFilePath, "utf8");
    var textStyles = TextStyle$LonaCompilerCore.parseFile(textStylesFile);
    var configInputPath = Path.join(workspace, "compiler.js");
    var config = Config$LonaCompilerCore.loadConfig(configInputPath);
    switch (target) {
      case 0 : 
          return JavaScriptRender$LonaCompilerCore.toString(JavaScriptComponent$LonaCompilerCore.generate(javaScriptOptions, name, Path.relative(Path.dirname(filename), colorsFilePath), Path.relative(Path.dirname(filename), textStylesFilePath), colors, textStyles, (function (param) {
                            return findComponent(workspace, param);
                          }), (function (param) {
                            return getComponentRelativePath(workspace, name, param);
                          }), (function (param) {
                            return getAssetRelativePath(workspace, name, param);
                          }), parsed));
      case 1 : 
          return SwiftRender$LonaCompilerCore.toString(SwiftComponent$LonaCompilerCore.generate(config, options, swiftOptions, name, colors, textStyles, (function (param) {
                            return findComponent(workspace, param);
                          }), parsed));
      case 2 : 
          return exit("Unrecognized target");
      
    }
  } else {
    return exit("Couldn't find workspace directory. Try specifying it as a parameter (TODO)");
  }
}

function copyStaticFiles(outputDirectory) {
  if (target !== 1) {
    return /* () */0;
  } else {
    var match = swiftOptions[/* framework */0];
    var framework = match ? "appkit" : "uikit";
    var base = __dirname;
    FsExtra.copySync(Path.join(base, "static/swift/TextStyle." + (framework + ".swift")), Path.join(outputDirectory, "TextStyle.swift"));
    return /* () */0;
  }
}

function findContentsAbove(contents) {
  var lines = contents.split("\n");
  var index = lines.findIndex((function (line) {
          return line.includes("LONA: KEEP ABOVE");
        }));
  if (index !== -1) {
    return /* Some */[lines.slice(0, index + 1 | 0).join("\n") + "\n\n"];
  } else {
    return /* None */0;
  }
}

function findContentsBelow(contents) {
  var lines = contents.split("\n");
  var index = lines.findIndex((function (line) {
          return line.includes("LONA: KEEP BELOW");
        }));
  if (index !== -1) {
    return /* Some */["\n" + lines.slice(index).join("\n")];
  } else {
    return /* None */0;
  }
}

function convertWorkspace(workspace, output) {
  var fromDirectory = Path.resolve(workspace);
  var toDirectory = Path.resolve(output);
  FsExtra.ensureDirSync(toDirectory);
  var colorsInputPath = Path.join(fromDirectory, "colors.json");
  var addition = formatFilename(target, "Colors") + targetExtension;
  var colorsOutputPath = Path.join(toDirectory, addition);
  var colors = Color$LonaCompilerCore.parseFile(Fs.readFileSync(colorsInputPath, "utf8"));
  Fs.writeFileSync(colorsOutputPath, renderColors(target, colors));
  var textStylesInputPath = Path.join(fromDirectory, "textStyles.json");
  var addition$1 = formatFilename(target, "TextStyles") + targetExtension;
  var textStylesOutputPath = Path.join(toDirectory, addition$1);
  var textStylesFile = Fs.readFileSync(textStylesInputPath, "utf8");
  var textStyles = renderTextStyles(target, colors, TextStyle$LonaCompilerCore.parseFile(textStylesFile));
  Fs.writeFileSync(textStylesOutputPath, textStyles);
  copyStaticFiles(toDirectory);
  Glob(Path.join(fromDirectory, "**/*.component"), (function (_, files) {
          var files$1 = List.filter((function (file) {
                    var match = options_001;
                    if (match) {
                      return new RegExp(match[0]).test(file);
                    } else {
                      return true;
                    }
                  }))($$Array.to_list(files));
          var processFile = function (file) {
            var fromRelativePath = Path.relative(fromDirectory, file);
            var addition = Path.basename(fromRelativePath, ".component");
            var base = Path.dirname(fromRelativePath);
            var toRelativePath = Path.join(base, addition) + targetExtension;
            var outputPath = Path.join(toDirectory, toRelativePath);
            console.log(Path.join(workspace, fromRelativePath) + ("=>" + Path.join(output, toRelativePath)));
            var exit = 0;
            var contents;
            try {
              contents = convertComponent(file);
              exit = 1;
            }
            catch (raw_e){
              var e = Js_exn.internalToOCamlException(raw_e);
              if (e[0] === Json_decode.DecodeError) {
                console.log("Failed to decode " + file);
                console.log(e[1]);
                return /* () */0;
              } else if (e[0] === Decode$LonaCompilerCore.UnknownParameter) {
                console.log("Unknown parameter: " + e[1]);
                return /* () */0;
              } else if (e[0] === Decode$LonaCompilerCore.UnknownExprType) {
                console.log("Unknown expr name: " + e[1]);
                return /* () */0;
              } else {
                console.log("Unknown error");
                console.log(e);
                return /* () */0;
              }
            }
            if (exit === 1) {
              FsExtra.ensureDirSync(Path.dirname(outputPath));
              var match;
              var exit$1 = 0;
              var existing;
              try {
                existing = Fs.readFileSync(outputPath, "utf8");
                exit$1 = 2;
              }
              catch (exn){
                match = /* tuple */[
                  /* None */0,
                  /* None */0
                ];
              }
              if (exit$1 === 2) {
                match = /* tuple */[
                  findContentsAbove(existing),
                  findContentsBelow(existing)
                ];
              }
              var contentsBelow = match[1];
              var contentsAbove = match[0];
              var contents$1 = contentsAbove ? contentsAbove[0] + contents : contents;
              var contents$2 = contentsBelow ? contents$1 + contentsBelow[0] : contents$1;
              Fs.writeFileSync(outputPath, contents$2);
              return /* () */0;
            }
            
          };
          return List.iter(processFile, files$1);
        }));
  Glob(Path.join(fromDirectory, "**/*.png"), (function (_, files) {
          var files$1 = $$Array.to_list(files);
          var processFile = function (file) {
            var fromRelativePath = Path.relative(fromDirectory, file);
            var outputPath = Path.join(toDirectory, fromRelativePath);
            console.log(Path.join(workspace, fromRelativePath) + ("=>" + Path.join(output, fromRelativePath)));
            FsExtra.copySync(file, outputPath);
            return /* () */0;
          };
          return List.iter(processFile, files$1);
        }));
  return /* () */0;
}

switch (command) {
  case "colors" : 
      if (List.length(positionalArguments) < 5) {
        var render = function (contents) {
          return Promise.resolve((console.log(renderColors(target, Color$LonaCompilerCore.parseFile(contents))), /* () */0));
        };
        GetStdin().then(render);
      } else {
        var contents = Fs.readFileSync(List.nth(positionalArguments, 4), "utf8");
        console.log(renderColors(target, Color$LonaCompilerCore.parseFile(contents)));
      }
      break;
  case "component" : 
      if (List.length(positionalArguments) < 5) {
        exit("No filename given");
      }
      console.log(convertComponent(List.nth(positionalArguments, 4)));
      break;
  case "textStyles" : 
      if (List.length(positionalArguments) < 5) {
        var render$1 = function (content) {
          return Promise.resolve((console.log(renderColors(target, Color$LonaCompilerCore.parseFile(content))), /* () */0));
        };
        GetStdin().then(render$1);
      } else {
        var filename = List.nth(positionalArguments, 4);
        var match$4 = findWorkspaceDirectory(filename);
        if (match$4) {
          var content = Fs.readFileSync(filename, "utf8");
          console.log(convertTextStyles(target, match$4[0], content));
        } else {
          exit("Couldn't find workspace directory. Try specifying it as a parameter (TODO)");
        }
      }
      break;
  case "workspace" : 
      if (List.length(positionalArguments) < 5) {
        exit("No workspace path given");
      }
      if (List.length(positionalArguments) < 6) {
        exit("No output path given");
      }
      convertWorkspace(List.nth(positionalArguments, 4), List.nth(positionalArguments, 5));
      break;
  default:
    console.log("Invalid command", command);
}

exports.$$arguments = $$arguments;
exports.positionalArguments = positionalArguments;
exports.getArgument = getArgument;
exports.options = options;
exports.swiftOptions = swiftOptions;
exports.javaScriptOptions = javaScriptOptions;
exports.exit = exit;
exports.command = command;
exports.target = target;
exports.findWorkspaceDirectory = findWorkspaceDirectory;
exports.concat = concat;
exports.getTargetExtension = getTargetExtension;
exports.formatFilename = formatFilename;
exports.targetExtension = targetExtension;
exports.renderColors = renderColors;
exports.renderTextStyles = renderTextStyles;
exports.convertColors = convertColors;
exports.convertTextStyles = convertTextStyles;
exports.ComponentNotFound = ComponentNotFound;
exports.findComponentFile = findComponentFile;
exports.findComponent = findComponent;
exports.getComponentRelativePath = getComponentRelativePath;
exports.getAssetRelativePath = getAssetRelativePath;
exports.convertComponent = convertComponent;
exports.copyStaticFiles = copyStaticFiles;
exports.findContentsAbove = findContentsAbove;
exports.findContentsBelow = findContentsBelow;
exports.convertWorkspace = convertWorkspace;
/* arguments Not a pure module */
